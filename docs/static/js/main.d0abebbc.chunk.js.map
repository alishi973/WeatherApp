{"version":3,"sources":["Components/Header.jsx","Components/GridData.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","appBar","background","blue","padding","marginBottom","Header","classes","AppBar","position","className","Toolbar","variant","Typography","color","paper","height","textAlign","palette","text","secondary","borderRadius","display","alignItems","justifyContent","margin","listContainer","width","weatherItem","boxShadow","backgroundColor","skeleton","flexDirection","avatarXl","backgroundImage","GeneralCardContainer","GridData","props","GeneralData","WeatherListItem","ListItem","ListItemAvatar","Avatar","style","border","objectFit","src","process","replace","this","min_max","weather","icon","ListItemText","primary","main","temp_min","description","date","React","Component","Container","Grid","container","item","xs","Paper","data","marginTop","temp","CircularProgress","maxHeight","overflow","List","ForeCast","list","map","index","key","dt_txt","Skeleton","animation","flexBasis","App","useState","SetForeCast","SetGeneralData","useEffect","setTimeout","a","axios","get","CssBaseline","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d0abebbc.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Toolbar,Typography,IconButton, AppBar,makeStyles } from '@material-ui/core'\r\nimport { blue } from '@material-ui/core/colors';\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    appBar:{\r\n        // background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)'\r\n        background: blue[500],\r\n        padding:\"5px\",\r\n        marginBottom:\"25px\"\r\n    }\r\n  }));\r\nconst Header = () => {\r\n    const classes=useStyles();\r\n    return (\r\n        <AppBar position=\"sticky\" className={classes.appBar}>\r\n      <Toolbar variant=\"dense\">\r\n      {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n        &#9776;\r\n      </IconButton> */}\r\n      <Typography variant=\"h6\" color=\"inherit\">\r\n        Mashhad Weather\r\n      </Typography>\r\n    </Toolbar>\r\n  </AppBar>\r\n      );\r\n}\r\n \r\nexport default Header;","import React, { Fragment } from 'react';\r\nimport { Grid,Paper,makeStyles,Container, CircularProgress,List,ListItem,ListItemText,ListItemAvatar,Avatar } from '@material-ui/core';\r\nimport { Skeleton } from '@material-ui/lab';\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      height:\"120px\",\r\n      textAlign: 'center',\r\n      color: theme.palette.text.secondary,\r\n      borderRadius:\"5px\",\r\n      display:\"flex\",\r\n      alignItems:\"center\",\r\n      justifyContent:\"space-between\"\r\n    },\r\n    margin:{\r\n        margin:\"0 auto\",\r\n        display:\"flex\",\r\n        justifyContent:\"center\",\r\n        alignItems:\"center\",\r\n        textAlign:\"center\"\r\n    },\r\n    listContainer: {\r\n        width: '100%',\r\n        // backgroundColor: \"#fafafafa\",\r\n        margin:\"0 auto\"\r\n      },\r\n    weatherItem: {\r\n        boxShadow:\"0px 2px 1px -1px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 1px 3px 0px rgba(0,0,0,0.12)\",\r\n        borderRadius:\"5px\",\r\n        marginBottom:\"15px\",\r\n        backgroundColor: theme.palette.background.paper,\r\n        \r\n      },\r\n      skeleton:{\r\n          height:\"85px\",\r\n          display:\"flex\",\r\n          width:\"100%\",\r\n          justifyContent:\"space-evenly\",\r\n          alignItems:\"center\",\r\n          flexDirection:\"row\",\r\n          padding:\"0px 10px\",\r\n          marginBottom:\"15px\",\r\n      },\r\n      avatarXl:{\r\n        width: theme.spacing(10),\r\n        height: theme.spacing(10),\r\n        backgroundImage:\" linear-gradient(-270deg,lightgray, #e6e6e6)\"\r\n      },\r\n      GeneralCardContainer:{\r\n          display:'flex',\r\n          flexDirection:\"column\",\r\n          alignItems:\"flex-end\",\r\n          justifyContent:\"space-evenly\"\r\n      }\r\n\r\n  }));\r\n\r\n\r\n\r\n\r\n\r\nconst GridData = (props) => {\r\n    const classes=useStyles();\r\n\r\n    let GeneralCard=(GeneralData)=>{\r\n        if(GeneralData!=null){\r\n            return(\r\n                <Grid item xs={12}>\r\n                    <Paper className={classes.paper}>\r\n                        <div>\r\n                            <Avatar className={classes.avatarXl}>\r\n                                <img src={ process.env.REACT_APP_BASE_URL_IMG.replace(\"{CODE}\",GeneralData.data.weather[0].icon)} style={{height:\"100%\"}} />\r\n                            </Avatar>\r\n                        </div>\r\n                        <div className={classes.GeneralCardContainer}>\r\n                            <h1 style={{marginTop:\"0\",marginBottom:\"0\"}}>Mashhad</h1>\r\n                            <h3 style={{marginTop:\"0\",marginBottom:\"0\"}}>{GeneralData.data.weather[0].main} ({GeneralData.data.main.temp}&#8451;)</h3>\r\n                            <h4 style={{marginTop:\"0\",marginBottom:\"0\"}}>{}</h4>\r\n                        </div>\r\n                    </Paper>\r\n                </Grid>\r\n            );\r\n        }else{\r\n            return(\r\n                <Grid item xs={12} className={classes.margin}>\r\n                    <Paper style={{width:\"100%\",display:\"flex\",justifyContent:\"center\",alignItems:\"center\"}} className={classes.paper}><CircularProgress style={{color:\"#57d218\"}} /></Paper>\r\n                </Grid>\r\n            );\r\n        }\r\n    }\r\n\r\n    class WeatherListItem extends React.Component{\r\n\r\n        constructor(props){\r\n            super(props);\r\n        }\r\n    \r\n        render(){\r\n            return (\r\n                <ListItem className={classes.weatherItem}>\r\n                    <ListItemAvatar>\r\n                    <Avatar style={{border: 0, objectFit: 'cover',backgroundColor:\"#e4e4e4\"}}>\r\n                        {/* <ImageIcon /> */}\r\n                        <img src={ process.env.REACT_APP_BASE_URL_IMG.replace(\"{CODE}\",this.props.min_max.weather[0].icon)} style={{height:\"100%\"}} />\r\n                    </Avatar>\r\n                    </ListItemAvatar>\r\n                    <ListItemText primary={`Min:${this.props.min_max.main.temp_min} & Max:${this.props.min_max.main.temp_min} And Sky Is ${this.props.min_max.weather[0].main}(${this.props.min_max.weather[0].description})`} secondary={this.props.date} />\r\n                </ListItem>\r\n            )\r\n        }\r\n    }\r\n\r\n    let skelet=()=>{\r\n        return (\r\n            <Fragment>\r\n                <Skeleton variant=\"rect\" animation=\"pulse\" className={classes.skeleton}>\r\n                    <ListItemAvatar>\r\n                    <Avatar>\r\n                        {/* <ImageIcon /> */}\r\n                        <Skeleton variant=\"circle\" />\r\n                    </Avatar>\r\n                    </ListItemAvatar>\r\n                    <div style={{flexBasis:\"90%\"}} >\r\n                        <Skeleton  variant=\"text\" />\r\n                        <Skeleton  variant=\"text\" />\r\n                    </div>\r\n                </Skeleton>\r\n                <Skeleton variant=\"rect\" animation=\"wave\" className={classes.skeleton}>\r\n                    <ListItemAvatar>\r\n                    <Avatar>\r\n                        {/* <ImageIcon /> */}\r\n                        <Skeleton variant=\"circle\" />\r\n                    </Avatar>\r\n                    </ListItemAvatar>\r\n                    {/* <div style={{flexBasis:\"85%\"}} > */}\r\n                    <div style={{flexBasis:\"90%\"}} >\r\n                        <Skeleton  variant=\"text\" />\r\n                        <Skeleton  variant=\"text\" />\r\n                    </div>\r\n                </Skeleton>\r\n                <Skeleton variant=\"rect\" className={classes.skeleton}>\r\n                    <ListItemAvatar>\r\n                    <Avatar>\r\n                        {/* <ImageIcon /> */}\r\n                        <Skeleton variant=\"circle\" />\r\n                    </Avatar>\r\n                    </ListItemAvatar>\r\n                    <div style={{flexBasis:\"90%\"}} >\r\n                        <Skeleton  variant=\"text\" />\r\n                        <Skeleton  variant=\"text\" />\r\n                    </div>\r\n                </Skeleton>\r\n                <Skeleton variant=\"rect\" animation=\"wave\" className={classes.skeleton}>\r\n                    <ListItemAvatar>\r\n                    <Avatar>\r\n                        {/* <ImageIcon /> */}\r\n                        <Skeleton variant=\"circle\" />\r\n                    </Avatar>\r\n                    </ListItemAvatar>\r\n                    <div style={{flexBasis:\"90%\"}} >\r\n                        <Skeleton  variant=\"text\" />\r\n                        <Skeleton  variant=\"text\" />\r\n                    </div>\r\n                </Skeleton>\r\n            \r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n    return (  \r\n        <div>\r\n        <Container>\r\n        <Grid container spacing={3}>\r\n\r\n            {GeneralCard(props.GeneralData)}\r\n    \r\n        <Grid style={{maxHeight:\"66vh\" , overflow:\"hidden scroll\"}} item xs={12}>\r\n            <List className={classes.listContainer}>\r\n                {\r\n                    props.ForeCast!=null?props.ForeCast.data.list.map((data,index)=>{\r\n                        return (<WeatherListItem key={index} min_max={data} date={data.dt_txt} />)\r\n                    }):skelet()\r\n                }\r\n                {/* <WeatherListItem min_max={\"15 10\"} date={new Date().toLocaleString()} /> */}\r\n              </List>\r\n        </Grid>\r\n      </Grid>\r\n        </Container>\r\n    </div>\r\n    );\r\n}\r\n \r\nexport default GridData;","import React, { Fragment, useState,useEffect } from 'react';\nimport Header from './Components/Header'\nimport GridData from './Components/GridData'\nimport { CssBaseline } from '@material-ui/core';\nimport axios from \"axios\"\n\n\nfunction App() {\n  \n  const [ForeCast,SetForeCast]=useState(null);\n  const [GeneralData,SetGeneralData]=useState(null);\n  \n  /* useEffect(()=>{\n    axios.get(process.env.REACT_APP_FORCAST_BASE_URL.replace(\"{MYCITY}\",\"mashhad\")).then((res)=>{\n      setTimeout(()=>{SetForeCast(res)},3000)\n    })  \n  },[ForeCast])\n  useEffect(()=>{\n    axios.get(process.env.REACT_APP_CURRENT_BASE_URL.replace(\"{MYCITY}\",\"mashhad\")).then((res)=>{\n      setTimeout(()=>{SetGeneralData(res)},3500)\n    })\n  },[GeneralData]) */\n\n\n  useEffect(()=>{\n    setTimeout(()=>{\n      (async()=>{\n        SetGeneralData(await axios.get(process.env.REACT_APP_CURRENT_BASE_URL.replace(\"{MYCITY}\",\"mashhad\")))\n        SetForeCast(await axios.get(process.env.REACT_APP_FORCAST_BASE_URL.replace(\"{MYCITY}\",\"mashhad\")))\n      })()\n    },1000)\n    \n  },[])\n  \n  return (\n    <Fragment>\n      <CssBaseline />\n      <Header/>\n      <GridData component=\"main\" GeneralData={GeneralData}  ForeCast={ForeCast} />\n      {/* <p>{process.env.REACT_APP_API_KEY}</p> */}\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}